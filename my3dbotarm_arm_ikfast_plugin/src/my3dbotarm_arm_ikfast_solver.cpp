/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-05-14 19:31:50.858100
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.04327)*x4);
x11=((0.1287)*x3);
x12=((1.0)*x4);
x13=((1.0)*x0);
x14=((0.04327)*x3);
x15=((0.0057)*x2);
x16=((1.0)*x5);
x17=((1.0)*x7);
x18=((1.0)*x3);
x19=((0.0057)*x4);
x20=((0.1287)*x4);
x21=(x0*x1);
x22=(x1*x6);
x23=(x2*x3);
x24=(x2*x6);
x25=(x0*x2);
x26=(x1*x3);
IkReal x27=((1.0)*x25);
eetrans[0]=((-0.0386)+((x7*((((x14*x25))+((x10*x21))))))+(((0.1073)*x21))+((x19*x21))+(((-1.0)*x20*x27))+((x5*((((x14*x21))+(((-1.0)*x10*x27))))))+((x11*x21))+((x0*x15*x3)));
IkReal x28=((1.0)*x24);
eetrans[1]=((((0.1073)*x22))+((x7*((((x14*x24))+((x10*x22))))))+((x19*x22))+(((-1.0)*x20*x28))+((x11*x22))+((x15*x3*x6))+((x5*((((x14*x22))+(((-1.0)*x10*x28)))))));
eetrans[2]=((0.06750431)+((x5*((((x1*x10))+((x14*x2))))))+(((0.1073)*x2))+(((-0.0057)*x26))+((x7*(((((-1.0)*x1*x14))+((x10*x2))))))+((x1*x20))+((x11*x2))+((x15*x4)));
IkReal x29=((1.0)*x12);
eerot[0]=((((-1.0)*x8*((((x17*(((((-1.0)*x25*x29))+((x13*x26))))))+((x16*(((((-1.0)*x13*x23))+(((-1.0)*x21*x29))))))))))+((x6*x9)));
IkReal x30=((1.0)*x12);
eerot[1]=((((-1.0)*x8*((((x16*(((((-1.0)*x22*x30))+(((-1.0)*x18*x24))))))+((x17*((((x18*x22))+(((-1.0)*x24*x30))))))))))+(((-1.0)*x13*x9)));
eerot[2]=((-1.0)*x8*((((x17*((((x18*x2))+((x1*x12))))))+((x16*(((((-1.0)*x12*x2))+x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0386)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.06750431)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x32 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x32.valid){
continue;
}
IkReal x31=x32.value;
j0array[0]=((-1.0)*x31);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x31)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x33=r02*r02;
IkReal x34=r01*r01;
IkReal x35=pz*pz;
IkReal x36=px*px;
IkReal x37=px*px*px;
IkReal x38=r00*r00;
IkReal x39=py*py*py;
IkReal x40=py*py;
IkReal x41=(py*sj0);
IkReal x42=((0.18421264)*pz);
IkReal x43=(r01*sj0);
IkReal x44=(px*r00);
IkReal x45=((0.8584)*cj0);
IkReal x46=(cj0*r02);
IkReal x47=(py*r01);
IkReal x48=(cj0*px);
IkReal x49=((0.00321435245072)*pz);
IkReal x50=(cj0*r00);
IkReal x51=((0.18421264)*r02);
IkReal x52=((0.00597032900136)*x33);
IkReal x53=((1.7168)*pz*r02);
IkReal x54=(px*x40);
IkReal x55=((0.8584)*x35);
IkReal x56=((0.8584)*x34);
IkReal x57=(px*x35);
IkReal x58=(sj0*x39);
IkReal x59=((0.8584)*x33);
IkReal x60=((0.000344900017962256)*r00*x46);
IkReal x61=((0.000344900017962256)*r02*x43);
IkReal x62=(r02*x43*x49);
IkReal x63=(r00*x46*x49);
IkReal x64=(x48*x52);
IkReal x65=((0.00275597655064)*x38*x48);
IkReal x66=((0.00275597655064)*x47*x50);
IkReal x67=(x41*x52);
IkReal x68=((0.00275597655064)*x34*x41);
IkReal x69=((0.00275597655064)*x43*x44);
IkReal x70=(x36*x43*x51);
IkReal x71=(x33*x37*x45);
IkReal x72=(x37*x38*x45);
IkReal x73=(x58*x59);
IkReal x74=((0.18421264)*r00*x40*x46);
IkReal x75=(x56*x58);
IkReal x76=(x41*x44*x51);
IkReal x77=(x33*x42*x48);
IkReal x78=(x38*x42*x48);
IkReal x79=(x34*x41*x42);
IkReal x80=(r00*r01*x39*x45);
IkReal x81=(x42*x47*x50);
IkReal x82=(x33*x41*x42);
IkReal x83=((0.8584)*r00*x37*x43);
IkReal x84=((0.18421264)*px*x46*x47);
IkReal x85=(x42*x43*x44);
IkReal x86=(x41*x44*x53);
IkReal x87=((2.5752)*x36*x47*x50);
IkReal x88=((1.7168)*x34*x40*x48);
IkReal x89=(x33*x45*x57);
IkReal x90=(x33*x41*x55);
IkReal x91=(x36*x41*x59);
IkReal x92=((1.7168)*px*pz*x46*x47);
IkReal x93=(x38*x45*x57);
IkReal x94=(x33*x45*x54);
IkReal x95=(x43*x44*x55);
IkReal x96=(x34*x41*x55);
IkReal x97=(r00*x35*x45*x47);
IkReal x98=((1.7168)*x36*x38*x41);
IkReal x99=((2.5752)*x40*x43*x44);
IkReal x100=(x36*x41*x56);
IkReal x101=(x36*x43*x53);
IkReal x102=(x38*x45*x54);
IkReal x103=((1.7168)*pz*r00*x40*x46);
IkReal x104=(x74+x70);
IkReal x105=(x77+x76+x79+x78+x60+x61+x82+x81+x84+x85);
IkReal x106=(x100+x101+x102+x103+x64+x65+x66+x67+x68+x69+x83+x80);
IkReal x107=(x75+x73+x72+x71+x62+x63+x88+x89+x86+x87+x99+x98+x91+x90+x93+x92+x95+x94+x97+x96);
op[0]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.1049487084)*px*py*r00*r01*(sj0*sj0)))+(((0.4292)*cj0*r00*r02*sj0*(py*py*py)))+(((-0.0524743542)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.4292)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.8584)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.4292)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.0524743542)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.0064211942)*(py*py)*(r02*r02)))+(((0.4292)*px*r00*r02*(py*py)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.04605316)*(py*py)*(r01*r01)))+(((7.59170707520356e-5)*(cj0*cj0)*(r00*r00)))+(((-0.8584)*pz*(py*py)*(r01*r01)))+(((-0.4292)*(pz*pz*pz)*(r02*r02)))+(((-0.8584)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.0642855884)*cj0*py*pz*r00*r02*sj0))+(((0.02033156)*(cj0*cj0)*(px*px)*(r02*r02)))+(((1.2876)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.0642855884)*cj0*r00*r01*sj0*(pz*pz)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.7168)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.00298516450068)*cj0*px*r01*r02*sj0))+(((-0.4292)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.4292)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00298516450068)*px*r00*r02*(cj0*cj0)))+(((0.0524743542)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.2876)*py*r01*r02*(pz*pz)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.1049487084)*cj0*px*py*sj0*(r01*r01)))+(((0.0524743542)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.4292)*pz*(px*px)*(r02*r02)))+(((0.00137798827532)*px*r00*r02))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.4292)*py*r01*r02*(px*px)))+(((0.02033156)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.8584)*pz*(px*px)*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((7.59170707520356e-5)*(r01*r01)*(sj0*sj0)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.4292)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.03079337385284e-5)*(r02*r02)))+(((-0.0064211942)*(px*px)*(r02*r02)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((0.8584)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.0642855884)*cj0*px*pz*r01*r02*sj0))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.0792639316)*py*pz*r01*r02))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.4292)*r00*r02*(px*px*px)))+(((-0.00298516450068)*cj0*py*r00*r02*sj0))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.00298516450068)*pz*(cj0*cj0)*(r00*r00)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.00597032900136)*cj0*pz*r00*r01*sj0))+(((0.1049487084)*cj0*px*py*sj0*(r00*r00)))+(((-0.0321427942)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.8584)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.0396319658)*(pz*pz)*(r02*r02)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.8584)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((0.00137798827532)*py*r01*r02))+(((1.2876)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.4292)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.00137798827532)*pz*(r02*r02)))+(((0.00298516450068)*pz*(r01*r01)*(sj0*sj0)))+(((-1.2876)*cj0*px*r01*r02*sj0*(py*py)))+(((0.4292)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.0792639316)*px*pz*r00*r02))+(((0.4292)*r01*r02*(py*py*py)))+(((-0.4292)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.09210632)*px*py*r00*r01))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((0.4292)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.7168)*px*py*pz*r00*r01))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((-0.8584)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.04605316)*(px*px)*(r00*r00)))+(((0.0642855884)*px*pz*r00*r02*(cj0*cj0)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-1.2876)*px*r00*r02*(pz*pz)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.4292)*px*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.04066312)*cj0*px*py*sj0*(r02*r02)))+(((1.2876)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-1.2876)*cj0*py*r00*r02*sj0*(px*px)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.8584)*cj0*px*py*pz*sj0*(r00*r00)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.0321427942)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((1.2876)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.1049487084)*px*py*r00*r01*(cj0*cj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((0.000151834141504071)*cj0*r00*r01*sj0))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.4292)*pz*(py*py)*(r02*r02)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.8584)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.0642855884)*py*pz*r01*r02*(sj0*sj0)))+(((-0.00298516450068)*py*r01*r02*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.4292)*r00*r02*(cj0*cj0)*(px*px*px)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.8584)*cj0*px*py*pz*sj0*(r01*r01))));
op[1]=((((-1.0)*x106))+(((-1.0)*x104))+x105+x107);
op[2]=((((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.1585278632)*px*py*r00*r01*(cj0*cj0)))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.04066312)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.1199270516)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.1049487084)*(pz*pz)*(r02*r02)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-0.0792639316)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.1585278632)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.2398541032)*cj0*px*pz*r01*r02*sj0))+(((0.2098974168)*py*pz*r01*r02))+(((-0.1585278632)*px*py*r00*r01*(sj0*sj0)))+(((-0.000193065876458185)*(r01*r01)*(sj0*sj0)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.1199270516)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2398541032)*cj0*py*pz*r00*r02*sj0))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.2398541032)*px*pz*r00*r02*(cj0*cj0)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.0792639316)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.2398541032)*cj0*r00*r01*sj0*(pz*pz)))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.09210632)*(px*px)*(r00*r00)))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((0.2098974168)*px*pz*r00*r02))+(((-0.1970550284)*(py*py)*(r02*r02)))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.08132624)*cj0*px*py*sj0*(r02*r02)))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-0.0792639316)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.000324284150485199)*(r02*r02)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.0792639316)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000193065876458185)*(cj0*cj0)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.2398541032)*py*pz*r01*r02*(sj0*sj0)))+(((0.04066312)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.00038613175291637)*cj0*r00*r01*sj0))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.09210632)*(py*py)*(r01*r01)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((-0.18421264)*px*py*r00*r01))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-0.1585278632)*cj0*px*py*sj0*(r00*r00)))+(((-0.1970550284)*(px*px)*(r02*r02)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0))));
op[3]=((((-1.0)*x106))+(((-1.0)*x105))+x104+x107);
op[4]=((((0.8584)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.1049487084)*px*py*r00*r01*(sj0*sj0)))+(((0.4292)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.00298516450068)*cj0*py*r00*r02*sj0))+(((-0.0524743542)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.8584)*pz*(py*py)*(r01*r01)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.00137798827532)*py*r01*r02))+(((-0.0524743542)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.0064211942)*(py*py)*(r02*r02)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.4292)*pz*(px*px)*(r02*r02)))+(((-0.00597032900136)*cj0*pz*r00*r01*sj0))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.8584)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.04605316)*(py*py)*(r01*r01)))+(((-1.2876)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((7.59170707520356e-5)*(cj0*cj0)*(r00*r00)))+(((1.7168)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.0642855884)*cj0*py*pz*r00*r02*sj0))+(((0.02033156)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.00137798827532)*px*r00*r02))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((1.2876)*cj0*px*r01*r02*sj0*(py*py)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.4292)*py*r01*r02*(px*px)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-0.8584)*cj0*px*py*pz*sj0*(r01*r01)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.4292)*cj0*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((0.4292)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.00298516450068)*cj0*px*r01*r02*sj0))+(((-0.0642855884)*cj0*r00*r01*sj0*(pz*pz)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-0.4292)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.00298516450068)*pz*(cj0*cj0)*(r00*r00)))+(((0.0524743542)*(cj0*cj0)*(px*px)*(r00*r00)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((1.2876)*cj0*py*r00*r02*sj0*(px*px)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.00137798827532)*pz*(r02*r02)))+(((0.1049487084)*cj0*px*py*sj0*(r01*r01)))+(((0.0524743542)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.4292)*px*r00*r02*(py*py)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.4292)*cj0*r01*r02*sj0*(px*px*px)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.02033156)*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.4292)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.4292)*r01*r02*(py*py*py)*(sj0*sj0)))+(((7.59170707520356e-5)*(r01*r01)*(sj0*sj0)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((1.2876)*py*r01*r02*(pz*pz)))+(((0.00298516450068)*py*r01*r02*(sj0*sj0)))+(((-1.03079337385284e-5)*(r02*r02)))+(((-0.0064211942)*(px*px)*(r02*r02)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((0.0642855884)*cj0*px*pz*r01*r02*sj0))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.0792639316)*py*pz*r01*r02))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.4292)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.1049487084)*cj0*px*py*sj0*(r00*r00)))+(((-0.0321427942)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.0396319658)*(pz*pz)*(r02*r02)))+(((0.4292)*(pz*pz*pz)*(r02*r02)))+(((0.8584)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.4292)*pz*(py*py)*(r02*r02)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.00298516450068)*px*r00*r02*(cj0*cj0)))+(((1.2876)*px*r00*r02*(pz*pz)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-1.2876)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.4292)*r00*r02*(px*px*px)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.8584)*pz*(px*px)*(r00*r00)))+(((-0.8584)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.4292)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.0792639316)*px*pz*r00*r02))+(((-0.09210632)*px*py*r00*r01))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-1.2876)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.4292)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.04605316)*(px*px)*(r00*r00)))+(((0.0642855884)*px*pz*r00*r02*(cj0*cj0)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.4292)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.8584)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.8584)*px*py*pz*r00*r01*(sj0*sj0)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.4292)*r01*r02*(py*py*py)))+(((0.8584)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-1.2876)*cj0*px*r01*r02*sj0*(pz*pz)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.04066312)*cj0*px*py*sj0*(r02*r02)))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((1.7168)*px*py*pz*r00*r01))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.8584)*cj0*px*py*pz*sj0*(r00*r00)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.0321427942)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.1049487084)*px*py*r00*r01*(cj0*cj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((0.000151834141504071)*cj0*r00*r01*sj0))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.00298516450068)*pz*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.4292)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.0642855884)*py*pz*r01*r02*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x108=(cj4*sj4);
j3eval[0]=x108;
j3eval[1]=IKsign(x108);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x109=((19.2490259738296)*sj1);
if( (((0.623860653750398)+(((19.2490259738296)*cj1*pz))+(((-89.6972319376961)*(px*px)))+((cj0*px*x109))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz)))+((py*sj0*x109)))) < -1-IKFAST_SINCOS_THRESH || (((0.623860653750398)+(((19.2490259738296)*cj1*pz))+(((-89.6972319376961)*(px*px)))+((cj0*px*x109))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz)))+((py*sj0*x109)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x110=IKasin(((0.623860653750398)+(((19.2490259738296)*cj1*pz))+(((-89.6972319376961)*(px*px)))+((cj0*px*x109))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz)))+((py*sj0*x109))));
j3array[0]=((-1.5265362064131)+(((-1.0)*x110)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.61505644717669)+x110);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x111=py*py;
IkReal x112=pz*pz;
IkReal x113=px*px;
IkReal x114=((0.2146)*sj1);
IkReal x115=(py*r00);
IkReal x116=(px*r01);
IkReal x117=((2.0)*sj0);
IkReal x118=(cj0*py);
IkReal x119=(cj0*r01);
IkReal x120=(pz*r02);
IkReal x121=(r00*sj0);
IkReal x122=((0.2146)*cj1*r02);
IkReal x123=((0.2146)*cj1*pz);
IkReal x124=((1.0)*x113);
evalcond[0]=((-0.0184684729)+(((-1.0)*x119*x124))+(((-1.0)*x118*x122))+((x112*x121))+((x111*x121))+((x111*x119))+(((2.0)*cj0*px*x115))+((x114*x116))+(((-1.0)*x114*x115))+(((0.01151329)*x121))+(((-0.000493278)*(IKsin(j3))))+(((-1.0)*px*x117*x120))+(((2.0)*x118*x120))+(((-1.0)*x121*x124))+(((-1.0)*x121*x123))+((px*sj0*x122))+(((-1.0)*x112*x119))+((x119*x123))+(((-1.0)*py*x116*x117))+(((-0.01151329)*x119))+(((-0.011137698)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x125=((0.04327)*sj3);
IkReal x126=((0.04327)*cj3);
IkReal x127=((0.1287)*pz);
IkReal x128=(pz*sj1);
IkReal x129=(cj1*pz);
IkReal x130=(cj0*cj1*px);
IkReal x131=(py*sj0*sj1);
IkReal x132=(cj0*px*sj1);
IkReal x133=(cj1*py*sj0);
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(((0.01380951)+(((0.004642871)*cj3))+(((-1.0)*x126*x129))+(((-0.0057)*x133))+(((-0.0057)*x130))+(((-1.0)*x126*x131))+(((-1.0)*x126*x132))+((x125*x128))+(((0.0057)*x128))+(((-1.0)*x125*x130))+(((-1.0)*x125*x133))+(((-0.1287)*x131))+(((-0.1287)*x132))+(((-1.0)*cj1*x127)))),IkReal(((0.00061161)+(((-1.0)*sj1*x127))+(((-0.0057)*x129))+(((-1.0)*x126*x128))+(((-0.0057)*x132))+(((-0.0057)*x131))+(((0.1287)*x130))+(((0.1287)*x133))+(((-1.0)*x125*x131))+(((-1.0)*x125*x132))+((x126*x130))+((x126*x133))+(((-1.0)*x125*x129))+(((0.004642871)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x134.value)))+(x135.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x136=IKsin(j2);
IkReal x137=IKcos(j2);
IkReal x138=(px*sj1);
IkReal x139=(py*sj1);
IkReal x140=(cj0*r01);
IkReal x141=(cj1*sj0);
IkReal x142=((1.0)*px);
IkReal x143=(pz*r00);
IkReal x144=(pz*sj1);
IkReal x145=(cj0*cj1);
IkReal x146=(cj1*pz);
IkReal x147=((0.1287)*x137);
IkReal x148=((0.0057)*x136);
IkReal x149=((0.1287)*x136);
IkReal x150=((0.0057)*x137);
IkReal x151=((0.04327)*x136);
IkReal x152=((0.04327)*x137);
IkReal x153=(cj3*x152);
IkReal x154=(sj3*x151);
IkReal x155=(cj3*x151);
IkReal x156=(sj3*x152);
IkReal x157=(x154+x148);
IkReal x158=(x153+x147);
IkReal x159=(x156+x155+x150+x149);
evalcond[0]=((-0.1073)+(((-1.0)*x159))+((cj0*x138))+x146+((sj0*x139)));
evalcond[1]=((((-1.0)*x158))+(((-1.0)*x142*x145))+(((-1.0)*py*x141))+x157+x144);
evalcond[2]=(((x140*x144))+(((-1.0)*x157))+(((-1.0)*cj1*r01*x142))+((cj1*py*r00))+x158+((r02*sj0*x138))+(((-1.0)*cj0*r02*x139))+(((-1.0)*sj0*sj1*x143)));
evalcond[3]=((((-1.0)*x159))+((py*r02*x145))+(((-0.1073)*r00*sj0))+((r00*x139))+((x141*x143))+(((0.1073)*x140))+(((-1.0)*r01*x138))+(((-1.0)*r02*x141*x142))+(((-1.0)*x140*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x160=((19.2490259738296)*sj1);
if( (((0.623860653750398)+((cj0*px*x160))+(((19.2490259738296)*cj1*pz))+((py*sj0*x160))+(((-89.6972319376961)*(px*px)))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((0.623860653750398)+((cj0*px*x160))+(((19.2490259738296)*cj1*pz))+((py*sj0*x160))+(((-89.6972319376961)*(px*px)))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x161=IKasin(((0.623860653750398)+((cj0*px*x160))+(((19.2490259738296)*cj1*pz))+((py*sj0*x160))+(((-89.6972319376961)*(px*px)))+(((-89.6972319376961)*(py*py)))+(((-89.6972319376961)*(pz*pz)))));
j3array[0]=((-1.5265362064131)+(((-1.0)*x161)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.61505644717669)+x161);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x162=py*py;
IkReal x163=pz*pz;
IkReal x164=px*px;
IkReal x165=((0.2146)*sj1);
IkReal x166=(py*r00);
IkReal x167=(px*r01);
IkReal x168=((2.0)*sj0);
IkReal x169=(cj0*py);
IkReal x170=(cj0*r01);
IkReal x171=(pz*r02);
IkReal x172=(r00*sj0);
IkReal x173=((0.2146)*cj1*r02);
IkReal x174=((0.2146)*cj1*pz);
IkReal x175=((1.0)*x164);
evalcond[0]=((0.0184684729)+(((2.0)*x169*x171))+(((0.011137698)*(IKcos(j3))))+((x162*x170))+((x162*x172))+(((0.000493278)*(IKsin(j3))))+(((0.01151329)*x172))+(((-0.01151329)*x170))+(((-1.0)*px*x168*x171))+(((-1.0)*x170*x175))+((x170*x174))+((x165*x167))+(((2.0)*cj0*px*x166))+(((-1.0)*x169*x173))+(((-1.0)*x165*x166))+(((-1.0)*py*x167*x168))+((px*sj0*x173))+((x163*x172))+(((-1.0)*x172*x174))+(((-1.0)*x172*x175))+(((-1.0)*x163*x170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x176=((0.04327)*sj3);
IkReal x177=((0.04327)*cj3);
IkReal x178=((0.1287)*pz);
IkReal x179=(pz*sj1);
IkReal x180=(cj1*pz);
IkReal x181=(cj0*cj1*px);
IkReal x182=(py*sj0*sj1);
IkReal x183=(cj0*px*sj1);
IkReal x184=(cj1*py*sj0);
CheckValue<IkReal> x185=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x185.valid){
continue;
}
CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(((0.01380951)+((x176*x179))+(((0.004642871)*cj3))+(((-1.0)*x176*x184))+(((-1.0)*x176*x181))+(((-1.0)*x177*x180))+(((-1.0)*x177*x182))+(((-1.0)*x177*x183))+(((-1.0)*cj1*x178))+(((-0.1287)*x182))+(((-0.1287)*x183))+(((0.0057)*x179))+(((-0.0057)*x184))+(((-0.0057)*x181)))),IkReal(((0.00061161)+((x177*x184))+((x177*x181))+(((-1.0)*x177*x179))+(((0.1287)*x184))+(((0.1287)*x181))+(((-1.0)*x176*x180))+(((-1.0)*x176*x183))+(((-1.0)*x176*x182))+(((0.004642871)*sj3))+(((-0.0057)*x180))+(((-0.0057)*x183))+(((-0.0057)*x182))+(((-1.0)*sj1*x178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x186.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x185.value)))+(x186.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x187=IKsin(j2);
IkReal x188=IKcos(j2);
IkReal x189=(px*sj1);
IkReal x190=(py*sj1);
IkReal x191=(cj0*r01);
IkReal x192=(cj1*sj0);
IkReal x193=((1.0)*px);
IkReal x194=(pz*r00);
IkReal x195=(pz*sj1);
IkReal x196=(cj0*cj1);
IkReal x197=(cj1*pz);
IkReal x198=((0.0057)*x187);
IkReal x199=((0.1287)*x188);
IkReal x200=((0.1287)*x187);
IkReal x201=((0.0057)*x188);
IkReal x202=((0.04327)*x187);
IkReal x203=((0.04327)*x188);
IkReal x204=(sj3*x202);
IkReal x205=(cj3*x203);
IkReal x206=(cj3*x202);
IkReal x207=(sj3*x203);
IkReal x208=(x199+x205);
IkReal x209=(x198+x204);
IkReal x210=(x207+x206+x201+x200);
evalcond[0]=((-0.1073)+((cj0*x189))+((sj0*x190))+x197+(((-1.0)*x210)));
evalcond[1]=(x195+(((-1.0)*x208))+x209+(((-1.0)*py*x192))+(((-1.0)*x193*x196)));
evalcond[2]=(((cj1*py*r00))+((r02*sj0*x189))+(((-1.0)*x208))+x209+(((-1.0)*cj0*r02*x190))+((x191*x195))+(((-1.0)*cj1*r01*x193))+(((-1.0)*sj0*sj1*x194)));
evalcond[3]=((((-1.0)*x191*x197))+((r00*x190))+(((-0.1073)*r00*sj0))+(((0.1073)*x191))+x210+((x192*x194))+(((-1.0)*r01*x189))+((py*r02*x196))+(((-1.0)*r02*x192*x193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x211=py*py;
IkReal x212=pz*pz;
IkReal x213=px*px;
IkReal x214=(cj4*sj4);
IkReal x215=((411065000.0)*sj4);
IkReal x216=(py*r01);
IkReal x217=(px*r00);
IkReal x218=((9281415000.0)*sj4);
IkReal x219=(pz*r02);
IkReal x220=(py*r00);
IkReal x221=(px*r01);
IkReal x222=(sj1*sj4);
IkReal x223=(r01*sj0);
IkReal x224=(cj1*r02);
IkReal x225=((23015850000.0)*cj4);
IkReal x226=(cj0*py);
IkReal x227=(cj0*r00);
IkReal x228=(cj1*pz);
IkReal x229=((9500000000.0)*cj4);
IkReal x230=(cj4*r00*sj0);
IkReal x231=((107250000000.0)*x211);
IkReal x232=(cj0*cj4*r01);
IkReal x233=((4750000000.0)*x212);
IkReal x234=((107250000000.0)*x213);
IkReal x235=((1019350000.0)*cj4*sj1);
IkReal x236=((4750000000.0)*x211);
IkReal x237=((4750000000.0)*x213);
IkReal x238=(cj4*px*sj0);
IkReal x239=((107250000000.0)*x212);
IkReal x240=((214500000000.0)*cj4*x226);
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKsign(x214),-1);
if(!x241.valid){
continue;
}
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal(((((-87725246.275)*x214))+(((54688127.5)*x230))+((x217*x226*x229))+(((-1.0)*x230*x237))+(((-1019350000.0)*cj4*x224*x226))+(((-1.0)*px*sj0*x219*x229))+((x232*x236))+((x230*x233))+((x230*x236))+(((-1.0)*x218*x219))+(((1019350000.0)*x228*x232))+(((-1019350000.0)*x228*x230))+(((-1.0)*x217*x218))+(((-1.0)*px*sj0*x216*x229))+(((995895829.5)*x222*x227))+(((995895829.5)*x222*x223))+(((995895829.5)*sj4*x224))+(((-1.0)*x220*x235))+(((1019350000.0)*x224*x238))+((x219*x226*x229))+((x221*x235))+(((-54688127.5)*x232))+(((-1.0)*x232*x237))+(((-1.0)*x232*x233))+(((-1.0)*x216*x218)))),IkReal(((((-1.0)*r00*sj0*x225*x228))+(((-1.0)*sj1*x220*x225))+(((-1.0)*x230*x234))+(((-1.0)*x224*x225*x226))+((cj0*r01*x225*x228))+(((-1980743718.525)*x214))+((x215*x216))+((x215*x219))+((x215*x217))+(((-44107274.5)*sj4*x224))+((x230*x231))+((x230*x239))+(((-1234800352.5)*x232))+(((1234800352.5)*x230))+((sj1*x221*x225))+(((-214500000000.0)*x216*x238))+(((-44107274.5)*x222*x223))+(((-44107274.5)*x222*x227))+((px*sj0*x224*x225))+((x219*x240))+((x231*x232))+(((-1.0)*x232*x234))+(((-1.0)*x232*x239))+((x217*x240))+(((-214500000000.0)*x219*x238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x241.value)))+(x242.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x243=IKcos(j3);
IkReal x244=IKsin(j3);
IkReal x245=pz*pz;
IkReal x246=py*py;
IkReal x247=px*px;
IkReal x248=(r01*sj0);
IkReal x249=((1.0)*r02);
IkReal x250=(cj0*px);
IkReal x251=((0.1073)*sj1);
IkReal x252=(r00*sj0);
IkReal x253=(cj0*r01);
IkReal x254=(py*sj0);
IkReal x255=(cj0*cj1);
IkReal x256=(py*r02);
IkReal x257=((0.2146)*sj1);
IkReal x258=((0.0057)*cj4);
IkReal x259=(cj0*r00);
IkReal x260=((2.0)*pz);
IkReal x261=((0.1287)*cj4);
IkReal x262=((0.1073)*cj1);
IkReal x263=((2.0)*px*py);
IkReal x264=((0.011137698)*x243);
IkReal x265=((0.000493278)*x244);
IkReal x266=((1.0)*x245);
IkReal x267=((1.0)*x247);
IkReal x268=((0.2146)*cj1*pz);
IkReal x269=(px*r02*sj0);
evalcond[0]=((((-1.0)*pz*x249))+((x248*x251))+(((-1.0)*px*r00))+((x251*x259))+((r02*x262))+((x243*x258))+(((-1.0)*py*r01))+(((-1.0)*x244*x261)));
evalcond[1]=((0.0069551829)+(((-1.0)*x246))+((x250*x257))+x265+x264+x268+((x254*x257))+(((-1.0)*x266))+(((-1.0)*x267)));
evalcond[2]=(((pz*x259))+(((-1.0)*x243*x261))+(((-0.1073)*r00*x255))+(((-1.0)*x244*x258))+(((-1.0)*x249*x254))+(((-1.0)*x249*x250))+(((-0.04327)*cj4))+((pz*x248))+((r02*x251))+(((-1.0)*x248*x262)));
evalcond[3]=(((x246*x252))+((x246*x253))+(((-0.01151329)*x253))+((cj0*x256*x260))+((x245*x252))+((x253*x268))+(((-1.0)*py*r00*x257))+(((-1.0)*sj4*x264))+(((-1.0)*sj4*x265))+((px*r01*x257))+(((-1.0)*x253*x267))+(((-1.0)*x253*x266))+(((2.0)*py*r00*x250))+(((-0.2146)*x255*x256))+(((0.2146)*cj1*x269))+(((-0.0184684729)*sj4))+(((0.01151329)*x252))+(((-1.0)*x252*x268))+(((-1.0)*x252*x267))+(((-1.0)*x260*x269))+(((-1.0)*x248*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x270=(cj3*cj4);
IkReal x271=(cj4*sj3);
j2eval[0]=(x270+(((-22.5789473684211)*x271)));
j2eval[1]=IKsign(((((0.0057)*x270))+(((-0.1287)*x271))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x272=(cj3*cj4);
IkReal x273=(cj4*sj3);
j2eval[0]=((((-1.0)*x273))+(((-7.59122807017544)*cj4))+(((-22.5789473684211)*x272)));
j2eval[1]=IKsign(((((-0.0057)*x273))+(((-0.04327)*cj4))+(((-0.1287)*x272))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x274=((0.04327)*sj3);
IkReal x275=((0.04327)*cj3);
IkReal x276=((0.1287)*pz);
IkReal x277=(pz*sj1);
IkReal x278=(cj1*pz);
IkReal x279=(cj0*cj1*px);
IkReal x280=(py*sj0*sj1);
IkReal x281=(cj0*px*sj1);
IkReal x282=(cj1*py*sj0);
CheckValue<IkReal> x283=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal(((0.01380951)+(((-0.1287)*x281))+(((-0.1287)*x280))+(((-1.0)*x274*x279))+(((0.004642871)*cj3))+(((-1.0)*cj1*x276))+((x274*x277))+(((0.0057)*x277))+(((-0.0057)*x279))+(((-0.0057)*x282))+(((-1.0)*x275*x278))+(((-1.0)*x275*x281))+(((-1.0)*x275*x280))+(((-1.0)*x274*x282)))),IkReal(((0.00061161)+(((-1.0)*sj1*x276))+(((-1.0)*x274*x278))+((x275*x279))+(((0.1287)*x282))+((x275*x282))+(((0.1287)*x279))+(((-0.0057)*x278))+(((0.004642871)*sj3))+(((-0.0057)*x280))+(((-0.0057)*x281))+(((-1.0)*x275*x277))+(((-1.0)*x274*x281))+(((-1.0)*x274*x280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x283.value)))+(x284.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x285=IKsin(j2);
IkReal x286=IKcos(j2);
IkReal x287=(px*sj1);
IkReal x288=(py*sj1);
IkReal x289=(cj0*r01);
IkReal x290=(cj1*sj0);
IkReal x291=((1.0)*px);
IkReal x292=(pz*r00);
IkReal x293=(pz*sj1);
IkReal x294=(cj0*cj1);
IkReal x295=(cj1*pz);
IkReal x296=((0.1287)*x286);
IkReal x297=((0.0057)*x285);
IkReal x298=((0.1287)*x285);
IkReal x299=((0.0057)*x286);
IkReal x300=((0.04327)*x285);
IkReal x301=((0.04327)*x286);
IkReal x302=(cj3*x301);
IkReal x303=(sj3*x300);
IkReal x304=(cj3*x300);
IkReal x305=(sj3*x301);
IkReal x306=(x303+x297);
IkReal x307=(x302+x296);
IkReal x308=(x304+x305+x298+x299);
evalcond[0]=((-0.1073)+((cj0*x287))+x295+((sj0*x288))+(((-1.0)*x308)));
evalcond[1]=((((-1.0)*py*x290))+(((-1.0)*x291*x294))+x306+x293+(((-1.0)*x307)));
evalcond[2]=(((x289*x293))+(((-1.0)*cj1*r01*x291))+((cj1*py*r00))+x307+((r02*sj0*x287))+(((-1.0)*cj0*r02*x288))+(((-1.0)*x306))+(((-1.0)*sj0*sj1*x292)));
evalcond[3]=(((x290*x292))+((r00*x288))+(((0.1073)*x289))+(((-1.0)*x289*x295))+(((-0.1073)*r00*sj0))+(((-1.0)*r01*x287))+(((-1.0)*r02*x290*x291))+((py*r02*x294))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x309=((0.04327)*sj3);
IkReal x310=((0.04327)*cj3);
IkReal x311=((0.1287)*pz);
IkReal x312=(pz*sj1);
IkReal x313=(cj1*pz);
IkReal x314=(cj0*cj1*px);
IkReal x315=(py*sj0*sj1);
IkReal x316=(cj0*px*sj1);
IkReal x317=(cj1*py*sj0);
CheckValue<IkReal> x318=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x318.valid){
continue;
}
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(((0.01380951)+(((-1.0)*x310*x316))+(((-1.0)*x310*x313))+(((-1.0)*x310*x315))+(((-0.0057)*x317))+(((-0.0057)*x314))+(((-0.1287)*x315))+(((-0.1287)*x316))+(((0.004642871)*cj3))+((x309*x312))+(((-1.0)*cj1*x311))+(((-1.0)*x309*x317))+(((-1.0)*x309*x314))+(((0.0057)*x312)))),IkReal(((0.00061161)+((x310*x314))+((x310*x317))+(((-1.0)*x310*x312))+(((-0.0057)*x315))+(((-0.0057)*x313))+(((-0.0057)*x316))+(((-1.0)*sj1*x311))+(((0.1287)*x314))+(((0.1287)*x317))+(((0.004642871)*sj3))+(((-1.0)*x309*x315))+(((-1.0)*x309*x316))+(((-1.0)*x309*x313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x318.value)))+(x319.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x320=IKsin(j2);
IkReal x321=IKcos(j2);
IkReal x322=(px*sj1);
IkReal x323=(py*sj1);
IkReal x324=(cj0*r01);
IkReal x325=(cj1*sj0);
IkReal x326=((1.0)*px);
IkReal x327=(pz*r00);
IkReal x328=(pz*sj1);
IkReal x329=(cj0*cj1);
IkReal x330=(cj1*pz);
IkReal x331=((0.0057)*x320);
IkReal x332=((0.1287)*x321);
IkReal x333=((0.1287)*x320);
IkReal x334=((0.0057)*x321);
IkReal x335=((0.04327)*x320);
IkReal x336=((0.04327)*x321);
IkReal x337=(sj3*x335);
IkReal x338=(cj3*x336);
IkReal x339=(cj3*x335);
IkReal x340=(sj3*x336);
IkReal x341=(x338+x332);
IkReal x342=(x331+x337);
IkReal x343=(x339+x333+x334+x340);
evalcond[0]=((-0.1073)+x330+((cj0*x322))+((sj0*x323))+(((-1.0)*x343)));
evalcond[1]=((((-1.0)*py*x325))+(((-1.0)*x326*x329))+x328+x342+(((-1.0)*x341)));
evalcond[2]=((((-1.0)*cj0*r02*x323))+(((-1.0)*cj1*r01*x326))+((r02*sj0*x322))+((cj1*py*r00))+(((-1.0)*sj0*sj1*x327))+x342+((x324*x328))+(((-1.0)*x341)));
evalcond[3]=((((-1.0)*r02*x325*x326))+(((-1.0)*r01*x322))+((x325*x327))+((r00*x323))+(((-1.0)*x324*x330))+(((-0.1073)*r00*sj0))+x343+(((0.1073)*x324))+((py*r02*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x344=(cj1*r02);
IkReal x345=(cj0*px);
IkReal x346=(py*sj0);
IkReal x347=(cj3*cj4);
IkReal x348=(cj4*sj3);
IkReal x349=((1.0)*sj1);
IkReal x350=((0.04327)*cj3);
IkReal x351=((0.04327)*sj3);
IkReal x352=(r01*sj0*sj1);
IkReal x353=((1.0)*cj1*pz);
IkReal x354=(cj0*r00*sj1);
IkReal x355=(x347*x349);
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((((0.0057)*x354))+(((0.0057)*x352))+(((-1.0)*x345*x355))+(((0.1073)*x347))+(((0.0057)*x344))+((x344*x351))+(((-1.0)*x346*x355))+((x351*x354))+((x351*x352))+(((-1.0)*x347*x353)))),IkReal(((((-1.0)*x348*x353))+(((-0.1287)*x344))+(((0.1073)*x348))+(((-1.0)*x344*x350))+(((-1.0)*x345*x348*x349))+(((-1.0)*x346*x348*x349))+(((-0.1287)*x352))+(((-0.1287)*x354))+(((-1.0)*x350*x352))+(((-1.0)*x350*x354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
CheckValue<IkReal> x357=IKPowWithIntegerCheck(IKsign(((((-0.1287)*x347))+(((-0.0057)*x348))+(((-0.04327)*cj4)))),-1);
if(!x357.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x356.value)+(((1.5707963267949)*(x357.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x358=IKcos(j2);
IkReal x359=IKsin(j2);
IkReal x360=px*px;
IkReal x361=pz*pz;
IkReal x362=py*py;
IkReal x363=(r01*sj0);
IkReal x364=(py*sj1);
IkReal x365=((1.0)*cj1);
IkReal x366=((1.0)*sj1);
IkReal x367=(cj0*r00);
IkReal x368=(r02*sj1);
IkReal x369=((2.0)*pz);
IkReal x370=(cj0*px);
IkReal x371=((0.01151329)*cj1);
IkReal x372=((0.0146589071)*sj3);
IkReal x373=(px*r01);
IkReal x374=(cj1*py);
IkReal x375=(px*sj0);
IkReal x376=((2.0)*r00);
IkReal x377=(cj1*r02);
IkReal x378=(cj0*r02);
IkReal x379=((0.2146)*py);
IkReal x380=((0.2146)*pz);
IkReal x381=((0.00146718)*cj4);
IkReal x382=((0.04327)*sj3);
IkReal x383=((0.01151329)*sj1);
IkReal x384=(r02*sj0);
IkReal x385=(px*r00);
IkReal x386=((2.0)*r01);
IkReal x387=(pz*r00*sj0);
IkReal x388=(cj4*x359);
IkReal x389=(cj0*pz*r01);
IkReal x390=((0.0057)*x359);
IkReal x391=(cj3*x358);
IkReal x392=(sj4*x358);
IkReal x393=(cj4*x358);
IkReal x394=(sj1*x361);
IkReal x395=(r02*x361);
IkReal x396=((0.1287)*x359);
IkReal x397=((0.04327)*sj4*x359);
evalcond[0]=(((sj1*x363))+((sj1*x367))+x377+(((-1.0)*cj4*x391))+((sj3*x388)));
evalcond[1]=((((-1.0)*x363*x365))+((cj3*x388))+x368+((sj3*x393))+(((-1.0)*x365*x367)));
evalcond[2]=((-0.1073)+(((-1.0)*x358*x382))+(((-0.04327)*cj3*x359))+(((-1.0)*x396))+((sj1*x370))+((sj0*x364))+((cj1*pz))+(((-0.0057)*x358)));
evalcond[3]=((((-1.0)*py*sj0*x365))+((x359*x382))+x390+((pz*sj1))+(((-0.1287)*x358))+(((-0.04327)*x391))+(((-1.0)*x365*x370)));
evalcond[4]=((((-1.0)*sj4*x390))+((r00*x374))+(((-1.0)*x364*x378))+((sj1*x389))+(((0.1287)*x392))+(((-1.0)*sj4*x359*x382))+((x368*x375))+(((0.04327)*sj4*x391))+(((-1.0)*x366*x387))+(((-1.0)*x365*x373)));
evalcond[5]=((((-1.0)*sj4*x396))+((cj1*x387))+(((-1.0)*x365*x389))+((r00*x364))+(((-0.1073)*r00*sj0))+(((-1.0)*x382*x392))+(((-1.0)*x366*x373))+(((-1.0)*r02*x365*x375))+(((-1.0)*cj3*x397))+((x374*x378))+(((0.1073)*cj0*r01))+(((-0.0057)*x392)));
evalcond[6]=((((-1.0)*x367*x383))+((x367*x394))+(((-1.0)*x364*x369*x384))+(((-1.0)*r01*x369*x374))+((r01*x379))+(((-1.0)*r02*x371))+(((0.000493278)*x388))+(((-1.0)*x364*x370*x386))+((r02*x380))+((cj3*x359*x381))+(((-1.0)*sj3*x358*x381))+(((-1.0)*x362*x363*x366))+(((-1.0)*cj1*x369*x385))+(((-1.0)*x360*x366*x367))+(((-0.011137698)*x393))+(((-1.0)*x363*x383))+(((0.2146)*x385))+(((-0.0184034929)*cj4*x391))+(((-1.0)*x368*x369*x370))+(((-1.0)*x365*x395))+((sj1*x362*x367))+((x363*x394))+((x360*x377))+((sj1*x360*x363))+(((-1.0)*x364*x375*x376))+((x362*x377))+(((-1.0)*x372*x388)));
evalcond[7]=((((-1.0)*x363*x371))+(((0.011137698)*x388))+(((-1.0)*x361*x365*x367))+(((-1.0)*x379*x384))+(((0.01151329)*x368))+((x369*x370*x377))+((x363*x380))+(((-1.0)*x372*x393))+((x381*x391))+((cj1*x362*x363))+((sj3*x359*x381))+(((-1.0)*sj1*x369*x385))+(((-1.0)*x367*x371))+(((-1.0)*x366*x395))+((x367*x380))+(((-1.0)*x361*x363*x365))+(((0.0184034929)*cj3*x388))+(((-1.0)*x360*x363*x365))+(((-1.0)*x362*x365*x367))+(((0.000493278)*x393))+(((-1.0)*r01*x364*x369))+((x360*x368))+((x369*x374*x384))+((x374*x375*x376))+((x362*x368))+(((-0.2146)*r02*x370))+((x370*x374*x386))+((cj1*x360*x367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x398=((0.04327)*cj3);
IkReal x399=((0.04327)*sj3);
IkReal x400=(cj1*r02);
IkReal x401=(py*sj0);
IkReal x402=(cj0*px);
IkReal x403=(cj3*cj4);
IkReal x404=(cj4*sj3);
IkReal x405=((0.04327)*x400);
IkReal x406=(cj0*r00*sj1);
IkReal x407=(r01*sj0*sj1);
IkReal x408=(cj1*x404);
IkReal x409=((1.0)*pz*sj1);
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign(((((0.0057)*x403))+(((-0.1287)*x404)))),-1);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal((((cj1*x401*x403))+((cj1*x402*x403))+(((-1.0)*x403*x409))+(((0.1287)*x400))+(((0.1287)*x407))+(((0.1287)*x406))+((x398*x406))+((x398*x407))+((x398*x400)))),IkReal(((((0.0057)*x406))+(((0.0057)*x400))+(((0.0057)*x407))+(((-1.0)*x404*x409))+((x399*x400))+((x399*x407))+((x399*x406))+((x402*x408))+((x401*x408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x410.value)))+(x411.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x412=IKcos(j2);
IkReal x413=IKsin(j2);
IkReal x414=px*px;
IkReal x415=pz*pz;
IkReal x416=py*py;
IkReal x417=(r01*sj0);
IkReal x418=(py*sj1);
IkReal x419=((1.0)*cj1);
IkReal x420=((1.0)*sj1);
IkReal x421=(cj0*r00);
IkReal x422=(r02*sj1);
IkReal x423=((2.0)*pz);
IkReal x424=(cj0*px);
IkReal x425=((0.01151329)*cj1);
IkReal x426=((0.0146589071)*sj3);
IkReal x427=(px*r01);
IkReal x428=(cj1*py);
IkReal x429=(px*sj0);
IkReal x430=((2.0)*r00);
IkReal x431=(cj1*r02);
IkReal x432=(cj0*r02);
IkReal x433=((0.2146)*py);
IkReal x434=((0.2146)*pz);
IkReal x435=((0.00146718)*cj4);
IkReal x436=((0.04327)*sj3);
IkReal x437=((0.01151329)*sj1);
IkReal x438=(r02*sj0);
IkReal x439=(px*r00);
IkReal x440=((2.0)*r01);
IkReal x441=(pz*r00*sj0);
IkReal x442=(cj4*x413);
IkReal x443=(cj0*pz*r01);
IkReal x444=((0.0057)*x413);
IkReal x445=(cj3*x412);
IkReal x446=(sj4*x412);
IkReal x447=(cj4*x412);
IkReal x448=(sj1*x415);
IkReal x449=(r02*x415);
IkReal x450=((0.1287)*x413);
IkReal x451=((0.04327)*sj4*x413);
evalcond[0]=(((sj1*x417))+(((-1.0)*cj4*x445))+x431+((sj3*x442))+((sj1*x421)));
evalcond[1]=((((-1.0)*x417*x419))+x422+((sj3*x447))+((cj3*x442))+(((-1.0)*x419*x421)));
evalcond[2]=((-0.1073)+(((-0.0057)*x412))+((sj0*x418))+((cj1*pz))+(((-1.0)*x450))+(((-0.04327)*cj3*x413))+((sj1*x424))+(((-1.0)*x412*x436)));
evalcond[3]=((((-0.1287)*x412))+(((-1.0)*py*sj0*x419))+((x413*x436))+x444+(((-1.0)*x419*x424))+((pz*sj1))+(((-0.04327)*x445)));
evalcond[4]=(((sj1*x443))+(((-1.0)*x420*x441))+(((0.1287)*x446))+((r00*x428))+(((-1.0)*sj4*x413*x436))+(((-1.0)*x418*x432))+(((-1.0)*x419*x427))+(((-1.0)*sj4*x444))+((x422*x429))+(((0.04327)*sj4*x445)));
evalcond[5]=((((-1.0)*x420*x427))+((cj1*x441))+((x428*x432))+(((-0.0057)*x446))+(((-1.0)*sj4*x450))+(((-0.1073)*r00*sj0))+(((-1.0)*x436*x446))+(((-1.0)*r02*x419*x429))+((r00*x418))+(((-1.0)*cj3*x451))+(((0.1073)*cj0*r01))+(((-1.0)*x419*x443)));
evalcond[6]=(((x421*x448))+((x414*x431))+(((-1.0)*sj3*x412*x435))+(((-1.0)*x421*x437))+((sj1*x414*x417))+(((-1.0)*x422*x423*x424))+((r02*x434))+((x416*x431))+(((-1.0)*cj1*x423*x439))+(((0.000493278)*x442))+(((-1.0)*r02*x425))+((cj3*x413*x435))+(((-1.0)*x416*x417*x420))+(((-0.011137698)*x447))+(((-1.0)*x418*x424*x440))+(((-1.0)*x418*x423*x438))+((r01*x433))+((sj1*x416*x421))+(((-0.0184034929)*cj4*x445))+(((-1.0)*x426*x442))+((x417*x448))+(((0.2146)*x439))+(((-1.0)*x417*x437))+(((-1.0)*r01*x423*x428))+(((-1.0)*x418*x429*x430))+(((-1.0)*x419*x449))+(((-1.0)*x414*x420*x421)));
evalcond[7]=(((x435*x445))+(((-1.0)*x421*x425))+((x421*x434))+((sj3*x413*x435))+(((-1.0)*x433*x438))+(((-1.0)*x416*x419*x421))+(((-1.0)*x420*x449))+(((-1.0)*sj1*x423*x439))+(((-1.0)*x415*x419*x421))+((x414*x422))+(((0.011137698)*x442))+(((-1.0)*r01*x418*x423))+((cj1*x416*x417))+((x423*x424*x431))+(((-0.2146)*r02*x424))+((x416*x422))+(((0.000493278)*x447))+((x428*x429*x430))+(((-1.0)*x414*x417*x419))+(((-1.0)*x417*x425))+((x423*x428*x438))+(((-1.0)*x415*x417*x419))+(((-1.0)*x426*x447))+(((0.01151329)*x422))+(((0.0184034929)*cj3*x442))+((cj1*x414*x421))+((x417*x434))+((x424*x428*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x452=(cj1*cj3);
IkReal x453=(r01*sj0);
IkReal x454=(cj0*r00);
IkReal x455=(cj1*sj3);
IkReal x456=(cj3*sj1);
IkReal x457=((1.0)*r02);
IkReal x458=((1.0)*sj1*sj3);
CheckValue<IkReal> x459 = IKatan2WithCheck(IkReal((((x452*x453))+((x452*x454))+(((-1.0)*x456*x457))+(((-1.0)*x454*x458))+(((-1.0)*x455*x457))+(((-1.0)*x453*x458)))),IkReal((((x454*x455))+((x454*x456))+((x453*x456))+((x453*x455))+(((-1.0)*sj1*sj3*x457))+((r02*x452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x459.valid){
continue;
}
CheckValue<IkReal> x460=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x460.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x459.value)+(((1.5707963267949)*(x460.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x461=IKcos(j2);
IkReal x462=IKsin(j2);
IkReal x463=px*px;
IkReal x464=pz*pz;
IkReal x465=py*py;
IkReal x466=(r01*sj0);
IkReal x467=(py*sj1);
IkReal x468=((1.0)*cj1);
IkReal x469=((1.0)*sj1);
IkReal x470=(cj0*r00);
IkReal x471=(r02*sj1);
IkReal x472=((2.0)*pz);
IkReal x473=(cj0*px);
IkReal x474=((0.01151329)*cj1);
IkReal x475=((0.0146589071)*sj3);
IkReal x476=(px*r01);
IkReal x477=(cj1*py);
IkReal x478=(px*sj0);
IkReal x479=((2.0)*r00);
IkReal x480=(cj1*r02);
IkReal x481=(cj0*r02);
IkReal x482=((0.2146)*py);
IkReal x483=((0.2146)*pz);
IkReal x484=((0.00146718)*cj4);
IkReal x485=((0.04327)*sj3);
IkReal x486=((0.01151329)*sj1);
IkReal x487=(r02*sj0);
IkReal x488=(px*r00);
IkReal x489=((2.0)*r01);
IkReal x490=(pz*r00*sj0);
IkReal x491=(cj4*x462);
IkReal x492=(cj0*pz*r01);
IkReal x493=((0.0057)*x462);
IkReal x494=(cj3*x461);
IkReal x495=(sj4*x461);
IkReal x496=(cj4*x461);
IkReal x497=(sj1*x464);
IkReal x498=(r02*x464);
IkReal x499=((0.1287)*x462);
IkReal x500=((0.04327)*sj4*x462);
evalcond[0]=((((-1.0)*cj4*x494))+x480+((sj1*x466))+((sj3*x491))+((sj1*x470)));
evalcond[1]=((((-1.0)*x466*x468))+(((-1.0)*x468*x470))+x471+((sj3*x496))+((cj3*x491)));
evalcond[2]=((-0.1073)+(((-0.04327)*cj3*x462))+(((-1.0)*x499))+((cj1*pz))+((sj0*x467))+(((-1.0)*x461*x485))+(((-0.0057)*x461))+((sj1*x473)));
evalcond[3]=((((-1.0)*x468*x473))+(((-0.04327)*x494))+((x462*x485))+x493+(((-0.1287)*x461))+(((-1.0)*py*sj0*x468))+((pz*sj1)));
evalcond[4]=(((x471*x478))+(((0.04327)*sj4*x494))+(((-1.0)*x468*x476))+(((-1.0)*sj4*x462*x485))+(((0.1287)*x495))+((sj1*x492))+(((-1.0)*x467*x481))+(((-1.0)*sj4*x493))+(((-1.0)*x469*x490))+((r00*x477)));
evalcond[5]=((((-1.0)*x469*x476))+(((-0.1073)*r00*sj0))+(((-0.0057)*x495))+(((-1.0)*x468*x492))+(((-1.0)*r02*x468*x478))+(((-1.0)*sj4*x499))+(((-1.0)*cj3*x500))+((cj1*x490))+(((-1.0)*x485*x495))+((r00*x467))+(((0.1073)*cj0*r01))+((x477*x481)));
evalcond[6]=(((cj3*x462*x484))+(((0.000493278)*x491))+(((-1.0)*x465*x466*x469))+(((-1.0)*x467*x472*x487))+((sj1*x463*x466))+(((-1.0)*x471*x472*x473))+(((-1.0)*x470*x486))+(((-1.0)*cj1*x472*x488))+((r02*x483))+((x470*x497))+(((-1.0)*x466*x486))+(((-1.0)*x468*x498))+(((-1.0)*sj3*x461*x484))+(((-0.011137698)*x496))+(((-0.0184034929)*cj4*x494))+(((-1.0)*x467*x478*x479))+(((-1.0)*x467*x473*x489))+((r01*x482))+(((-1.0)*x463*x469*x470))+((x465*x480))+(((0.2146)*x488))+(((-1.0)*r01*x472*x477))+((sj1*x465*x470))+((x466*x497))+((x463*x480))+(((-1.0)*r02*x474))+(((-1.0)*x475*x491)));
evalcond[7]=((((-1.0)*sj1*x472*x488))+(((0.000493278)*x496))+(((-1.0)*x464*x466*x468))+(((-1.0)*r01*x467*x472))+(((-1.0)*x463*x466*x468))+(((0.0184034929)*cj3*x491))+(((0.01151329)*x471))+((x472*x473*x480))+((x463*x471))+((x473*x477*x489))+((cj1*x463*x470))+((x477*x478*x479))+((x465*x471))+((x470*x483))+((sj3*x462*x484))+((x472*x477*x487))+(((-1.0)*x464*x468*x470))+(((-1.0)*x465*x468*x470))+(((0.011137698)*x491))+(((-1.0)*x469*x498))+(((-1.0)*x482*x487))+((x466*x483))+(((-1.0)*x470*x474))+((x484*x494))+(((-1.0)*x466*x474))+(((-1.0)*x475*x496))+((cj1*x465*x466))+(((-0.2146)*r02*x473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x501=((230158.5)*sj1);
IkReal x502=(py*r01);
IkReal x503=((95000.0)*pz);
IkReal x504=((10193.5)*cj1);
IkReal x505=(r01*sj0);
IkReal x506=(px*r00);
IkReal x507=((2145000.0)*r02);
IkReal x508=(cj0*px);
IkReal x509=(cj0*r00);
IkReal x510=((230158.5)*cj1);
IkReal x511=((10193.5)*sj1);
IkReal x512=(py*sj0);
IkReal x513=((95000.0)*r02);
IkReal x514=((2145000.0)*pz);
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x507))+(((-2145000.0)*x506))+(((-2145000.0)*x502))+(((-4110.65)*cj4))+(((-1.0)*x512*x513))+((x501*x509))+((x501*x505))+((r02*x511))+((r02*x510))+((x503*x509))+((x503*x505))+(((-1.0)*x504*x505))+(((-1.0)*x504*x509))+(((-1.0)*x508*x513)))),IkReal(((((-92814.15)*cj4))+(((-1.0)*x507*x508))+(((-1.0)*x505*x510))+(((-1.0)*x505*x511))+(((95000.0)*x502))+(((95000.0)*x506))+((x505*x514))+(((-1.0)*x509*x511))+(((-1.0)*x509*x510))+(((-1.0)*x507*x512))+((x509*x514))+((r02*x501))+((r02*x503))+(((-1.0)*r02*x504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x515.value)))+(x516.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x517=IKcos(j3);
IkReal x518=IKsin(j3);
IkReal x519=pz*pz;
IkReal x520=py*py;
IkReal x521=px*px;
IkReal x522=(r01*sj0);
IkReal x523=((1.0)*r02);
IkReal x524=(cj0*px);
IkReal x525=((0.1073)*sj1);
IkReal x526=(r00*sj0);
IkReal x527=(cj0*r01);
IkReal x528=(py*sj0);
IkReal x529=(cj0*cj1);
IkReal x530=(py*r02);
IkReal x531=((0.2146)*sj1);
IkReal x532=((0.0057)*cj4);
IkReal x533=(cj0*r00);
IkReal x534=((2.0)*pz);
IkReal x535=((0.1287)*cj4);
IkReal x536=((0.1073)*cj1);
IkReal x537=((2.0)*px*py);
IkReal x538=((0.011137698)*x517);
IkReal x539=((0.000493278)*x518);
IkReal x540=((1.0)*x519);
IkReal x541=((1.0)*x521);
IkReal x542=((0.2146)*cj1*pz);
IkReal x543=(px*r02*sj0);
evalcond[0]=(((x522*x525))+((r02*x536))+(((-1.0)*px*r00))+((x517*x532))+((x525*x533))+(((-1.0)*x518*x535))+(((-1.0)*pz*x523))+(((-1.0)*py*r01)));
evalcond[1]=((0.0069551829)+(((-1.0)*x520))+(((-1.0)*x541))+(((-1.0)*x540))+x542+x539+x538+((x524*x531))+((x528*x531)));
evalcond[2]=(((pz*x533))+((pz*x522))+((r02*x525))+(((-1.0)*x523*x524))+(((-1.0)*x523*x528))+(((-0.1073)*r00*x529))+(((-1.0)*x517*x535))+(((-1.0)*x518*x532))+(((-0.04327)*cj4))+(((-1.0)*x522*x536)));
evalcond[3]=((((-1.0)*x526*x541))+(((-1.0)*x526*x542))+((x519*x526))+(((-1.0)*x534*x543))+(((-1.0)*x527*x540))+(((-1.0)*x527*x541))+(((-0.2146)*x529*x530))+(((-0.01151329)*x527))+(((-1.0)*sj4*x538))+(((-1.0)*sj4*x539))+(((-1.0)*py*r00*x531))+((px*r01*x531))+((x520*x526))+((x520*x527))+((cj0*x530*x534))+(((0.01151329)*x526))+(((-0.0184684729)*sj4))+(((-1.0)*x522*x537))+(((2.0)*py*r00*x524))+(((0.2146)*cj1*x543))+((x527*x542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x544=(cj3*cj4);
IkReal x545=(cj4*sj3);
j2eval[0]=(x544+(((-22.5789473684211)*x545)));
j2eval[1]=IKsign(((((0.0057)*x544))+(((-0.1287)*x545))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x546=(cj3*cj4);
IkReal x547=(cj4*sj3);
j2eval[0]=((((-1.0)*x547))+(((-7.59122807017544)*cj4))+(((-22.5789473684211)*x546)));
j2eval[1]=IKsign(((((-0.1287)*x546))+(((-0.04327)*cj4))+(((-0.0057)*x547))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x548=((0.04327)*sj3);
IkReal x549=((0.04327)*cj3);
IkReal x550=((0.1287)*pz);
IkReal x551=(pz*sj1);
IkReal x552=(cj1*pz);
IkReal x553=(cj0*cj1*px);
IkReal x554=(py*sj0*sj1);
IkReal x555=(cj0*px*sj1);
IkReal x556=(cj1*py*sj0);
CheckValue<IkReal> x557=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(((0.01380951)+((x548*x551))+(((0.004642871)*cj3))+(((-1.0)*cj1*x550))+(((-1.0)*x548*x556))+(((-1.0)*x548*x553))+(((-1.0)*x549*x552))+(((-1.0)*x549*x554))+(((-1.0)*x549*x555))+(((-0.1287)*x555))+(((-0.1287)*x554))+(((-0.0057)*x556))+(((-0.0057)*x553))+(((0.0057)*x551)))),IkReal(((0.00061161)+(((-1.0)*sj1*x550))+(((-1.0)*x548*x554))+(((-1.0)*x548*x555))+(((-1.0)*x548*x552))+(((-1.0)*x549*x551))+((x549*x553))+((x549*x556))+(((0.004642871)*sj3))+(((0.1287)*x553))+(((0.1287)*x556))+(((-0.0057)*x554))+(((-0.0057)*x555))+(((-0.0057)*x552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x557.value)))+(x558.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x559=IKsin(j2);
IkReal x560=IKcos(j2);
IkReal x561=(px*sj1);
IkReal x562=(py*sj1);
IkReal x563=(cj0*r01);
IkReal x564=(cj1*sj0);
IkReal x565=((1.0)*px);
IkReal x566=(pz*r00);
IkReal x567=(pz*sj1);
IkReal x568=(cj0*cj1);
IkReal x569=(cj1*pz);
IkReal x570=((0.1287)*x560);
IkReal x571=((0.0057)*x559);
IkReal x572=((0.1287)*x559);
IkReal x573=((0.0057)*x560);
IkReal x574=((0.04327)*x559);
IkReal x575=((0.04327)*x560);
IkReal x576=(cj3*x575);
IkReal x577=(sj3*x574);
IkReal x578=(cj3*x574);
IkReal x579=(sj3*x575);
IkReal x580=(x577+x571);
IkReal x581=(x576+x570);
IkReal x582=(x579+x578+x573+x572);
evalcond[0]=((-0.1073)+((cj0*x561))+((sj0*x562))+x569+(((-1.0)*x582)));
evalcond[1]=((((-1.0)*py*x564))+x567+x580+(((-1.0)*x581))+(((-1.0)*x565*x568)));
evalcond[2]=((((-1.0)*sj0*sj1*x566))+(((-1.0)*cj0*r02*x562))+((x563*x567))+((cj1*py*r00))+((r02*sj0*x561))+x581+(((-1.0)*x580))+(((-1.0)*cj1*r01*x565)));
evalcond[3]=(((py*r02*x568))+((x564*x566))+((r00*x562))+(((-0.1073)*r00*sj0))+(((-1.0)*x563*x569))+(((-1.0)*r01*x561))+(((0.1073)*x563))+(((-1.0)*x582))+(((-1.0)*r02*x564*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-37.4402931004423)+(((-1.0)*sj3))+(((-22.5789473684211)*cj3)));
j2eval[1]=IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x583=((0.04327)*sj3);
IkReal x584=((0.04327)*cj3);
IkReal x585=((0.1287)*pz);
IkReal x586=(pz*sj1);
IkReal x587=(cj1*pz);
IkReal x588=(cj0*cj1*px);
IkReal x589=(py*sj0*sj1);
IkReal x590=(cj0*px*sj1);
IkReal x591=(cj1*py*sj0);
CheckValue<IkReal> x592=IKPowWithIntegerCheck(IKsign(((-0.0184684729)+(((-0.011137698)*cj3))+(((-0.000493278)*sj3)))),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal(((0.01380951)+(((-0.0057)*x591))+(((-0.1287)*x590))+((x583*x586))+(((0.004642871)*cj3))+(((-1.0)*x584*x589))+(((-1.0)*x584*x587))+(((0.0057)*x586))+(((-0.1287)*x589))+(((-1.0)*x583*x588))+(((-0.0057)*x588))+(((-1.0)*x584*x590))+(((-1.0)*x583*x591))+(((-1.0)*cj1*x585)))),IkReal(((0.00061161)+((x584*x588))+(((-0.0057)*x590))+(((0.1287)*x588))+(((-1.0)*x584*x586))+(((-1.0)*x583*x587))+(((-1.0)*x583*x589))+(((0.1287)*x591))+(((-0.0057)*x587))+(((-0.0057)*x589))+(((-1.0)*x583*x590))+((x584*x591))+(((0.004642871)*sj3))+(((-1.0)*sj1*x585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x592.value)))+(x593.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x594=IKsin(j2);
IkReal x595=IKcos(j2);
IkReal x596=(px*sj1);
IkReal x597=(py*sj1);
IkReal x598=(cj0*r01);
IkReal x599=(cj1*sj0);
IkReal x600=((1.0)*px);
IkReal x601=(pz*r00);
IkReal x602=(pz*sj1);
IkReal x603=(cj0*cj1);
IkReal x604=(cj1*pz);
IkReal x605=((0.0057)*x594);
IkReal x606=((0.1287)*x595);
IkReal x607=((0.1287)*x594);
IkReal x608=((0.0057)*x595);
IkReal x609=((0.04327)*x594);
IkReal x610=((0.04327)*x595);
IkReal x611=(sj3*x609);
IkReal x612=(cj3*x610);
IkReal x613=(cj3*x609);
IkReal x614=(sj3*x610);
IkReal x615=(x606+x612);
IkReal x616=(x605+x611);
IkReal x617=(x607+x608+x614+x613);
evalcond[0]=((-0.1073)+(((-1.0)*x617))+x604+((sj0*x597))+((cj0*x596)));
evalcond[1]=((((-1.0)*x600*x603))+(((-1.0)*x615))+x602+x616+(((-1.0)*py*x599)));
evalcond[2]=((((-1.0)*cj1*r01*x600))+(((-1.0)*sj0*sj1*x601))+((cj1*py*r00))+(((-1.0)*cj0*r02*x597))+(((-1.0)*x615))+x616+((r02*sj0*x596))+((x598*x602)));
evalcond[3]=((((-1.0)*r02*x599*x600))+(((-0.1073)*r00*sj0))+(((0.1073)*x598))+((r00*x597))+((py*r02*x603))+(((-1.0)*r01*x596))+x617+((x599*x601))+(((-1.0)*x598*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x618=(cj1*r02);
IkReal x619=(cj0*px);
IkReal x620=(py*sj0);
IkReal x621=(cj3*cj4);
IkReal x622=(cj4*sj3);
IkReal x623=((1.0)*sj1);
IkReal x624=((0.04327)*cj3);
IkReal x625=((0.04327)*sj3);
IkReal x626=(r01*sj0*sj1);
IkReal x627=((1.0)*cj1*pz);
IkReal x628=(cj0*r00*sj1);
IkReal x629=(x621*x623);
CheckValue<IkReal> x630 = IKatan2WithCheck(IkReal(((((-1.0)*x621*x627))+(((0.0057)*x628))+(((0.0057)*x626))+((x625*x628))+((x625*x626))+(((-1.0)*x620*x629))+(((0.1073)*x621))+((x618*x625))+(((-1.0)*x619*x629))+(((0.0057)*x618)))),IkReal(((((-1.0)*x622*x627))+(((0.1073)*x622))+(((-1.0)*x624*x626))+(((-1.0)*x624*x628))+(((-1.0)*x620*x622*x623))+(((-1.0)*x619*x622*x623))+(((-1.0)*x618*x624))+(((-0.1287)*x626))+(((-0.1287)*x628))+(((-0.1287)*x618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign(((((-0.0057)*x622))+(((-0.04327)*cj4))+(((-0.1287)*x621)))),-1);
if(!x631.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x630.value)+(((1.5707963267949)*(x631.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x632=IKcos(j2);
IkReal x633=IKsin(j2);
IkReal x634=px*px;
IkReal x635=pz*pz;
IkReal x636=py*py;
IkReal x637=(r01*sj0);
IkReal x638=(py*sj1);
IkReal x639=((1.0)*cj1);
IkReal x640=((1.0)*sj1);
IkReal x641=(cj0*r00);
IkReal x642=(r02*sj1);
IkReal x643=((2.0)*pz);
IkReal x644=(cj0*px);
IkReal x645=((0.01151329)*cj1);
IkReal x646=((0.0146589071)*sj3);
IkReal x647=(px*r01);
IkReal x648=(cj1*py);
IkReal x649=(px*sj0);
IkReal x650=((2.0)*r00);
IkReal x651=(cj1*r02);
IkReal x652=(cj0*r02);
IkReal x653=((0.2146)*py);
IkReal x654=((0.2146)*pz);
IkReal x655=((0.00146718)*cj4);
IkReal x656=((0.04327)*sj3);
IkReal x657=((0.01151329)*sj1);
IkReal x658=(r02*sj0);
IkReal x659=(px*r00);
IkReal x660=((2.0)*r01);
IkReal x661=(pz*r00*sj0);
IkReal x662=(cj4*x633);
IkReal x663=(cj0*pz*r01);
IkReal x664=((0.0057)*x633);
IkReal x665=(cj3*x632);
IkReal x666=(sj4*x632);
IkReal x667=(cj4*x632);
IkReal x668=(sj1*x635);
IkReal x669=(r02*x635);
IkReal x670=((0.1287)*x633);
IkReal x671=((0.04327)*sj4*x633);
evalcond[0]=((((-1.0)*cj4*x665))+((sj1*x641))+((sj1*x637))+x651+((sj3*x662)));
evalcond[1]=(((cj3*x662))+(((-1.0)*x637*x639))+(((-1.0)*x639*x641))+x642+((sj3*x667)));
evalcond[2]=((-0.1073)+(((-0.0057)*x632))+((sj1*x644))+(((-1.0)*x632*x656))+((cj1*pz))+((sj0*x638))+(((-0.04327)*cj3*x633))+(((-1.0)*x670)));
evalcond[3]=((((-0.04327)*x665))+(((-1.0)*x639*x644))+((x633*x656))+x664+((pz*sj1))+(((-0.1287)*x632))+(((-1.0)*py*sj0*x639)));
evalcond[4]=((((-1.0)*sj4*x664))+((sj1*x663))+(((-1.0)*x639*x647))+(((0.1287)*x666))+(((0.04327)*sj4*x665))+(((-1.0)*x638*x652))+((r00*x648))+(((-1.0)*sj4*x633*x656))+((x642*x649))+(((-1.0)*x640*x661)));
evalcond[5]=((((-1.0)*cj3*x671))+(((-1.0)*x640*x647))+(((-1.0)*x639*x663))+(((-0.1073)*r00*sj0))+((x648*x652))+(((-0.0057)*x666))+(((-1.0)*x656*x666))+((r00*x638))+(((-1.0)*sj4*x670))+((cj1*x661))+(((-1.0)*r02*x639*x649))+(((0.1073)*cj0*r01)));
evalcond[6]=(((cj3*x633*x655))+((x636*x651))+(((-1.0)*sj3*x632*x655))+(((-1.0)*x641*x657))+(((-1.0)*x636*x637*x640))+((sj1*x636*x641))+(((-1.0)*x638*x644*x660))+(((-1.0)*cj1*x643*x659))+(((-0.0184034929)*cj4*x665))+((x634*x651))+(((0.2146)*x659))+(((-1.0)*x639*x669))+(((-1.0)*r01*x643*x648))+(((0.000493278)*x662))+(((-1.0)*x638*x643*x658))+((r02*x654))+(((-0.011137698)*x667))+(((-1.0)*x634*x640*x641))+(((-1.0)*r02*x645))+((x641*x668))+((sj1*x634*x637))+(((-1.0)*x642*x643*x644))+(((-1.0)*x638*x649*x650))+((x637*x668))+((r01*x653))+(((-1.0)*x646*x662))+(((-1.0)*x637*x657)));
evalcond[7]=((((0.01151329)*x642))+(((-1.0)*x635*x639*x641))+(((-1.0)*x636*x639*x641))+((x636*x642))+(((0.0184034929)*cj3*x662))+(((0.011137698)*x662))+(((-1.0)*x641*x645))+((sj3*x633*x655))+(((-1.0)*x634*x637*x639))+(((-1.0)*r01*x638*x643))+(((0.000493278)*x667))+((x643*x644*x651))+((x637*x654))+((x648*x649*x650))+((x634*x642))+((x641*x654))+(((-0.2146)*r02*x644))+((x644*x648*x660))+(((-1.0)*x637*x645))+(((-1.0)*x635*x637*x639))+((cj1*x634*x641))+((x643*x648*x658))+(((-1.0)*x653*x658))+((x655*x665))+(((-1.0)*x640*x669))+(((-1.0)*x646*x667))+((cj1*x636*x637))+(((-1.0)*sj1*x643*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x672=((0.04327)*cj3);
IkReal x673=((0.04327)*sj3);
IkReal x674=(cj1*r02);
IkReal x675=(py*sj0);
IkReal x676=(cj0*px);
IkReal x677=(cj3*cj4);
IkReal x678=(cj4*sj3);
IkReal x679=((0.04327)*x674);
IkReal x680=(cj0*r00*sj1);
IkReal x681=(r01*sj0*sj1);
IkReal x682=(cj1*x678);
IkReal x683=((1.0)*pz*sj1);
CheckValue<IkReal> x684=IKPowWithIntegerCheck(IKsign(((((0.0057)*x677))+(((-0.1287)*x678)))),-1);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal((((x672*x674))+((cj1*x675*x677))+(((0.1287)*x674))+((cj1*x676*x677))+((x672*x680))+((x672*x681))+(((-1.0)*x677*x683))+(((0.1287)*x681))+(((0.1287)*x680)))),IkReal((((x673*x674))+(((0.0057)*x674))+((x676*x682))+(((0.0057)*x680))+(((0.0057)*x681))+(((-1.0)*x678*x683))+((x673*x680))+((x673*x681))+((x675*x682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x684.value)))+(x685.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x686=IKcos(j2);
IkReal x687=IKsin(j2);
IkReal x688=px*px;
IkReal x689=pz*pz;
IkReal x690=py*py;
IkReal x691=(r01*sj0);
IkReal x692=(py*sj1);
IkReal x693=((1.0)*cj1);
IkReal x694=((1.0)*sj1);
IkReal x695=(cj0*r00);
IkReal x696=(r02*sj1);
IkReal x697=((2.0)*pz);
IkReal x698=(cj0*px);
IkReal x699=((0.01151329)*cj1);
IkReal x700=((0.0146589071)*sj3);
IkReal x701=(px*r01);
IkReal x702=(cj1*py);
IkReal x703=(px*sj0);
IkReal x704=((2.0)*r00);
IkReal x705=(cj1*r02);
IkReal x706=(cj0*r02);
IkReal x707=((0.2146)*py);
IkReal x708=((0.2146)*pz);
IkReal x709=((0.00146718)*cj4);
IkReal x710=((0.04327)*sj3);
IkReal x711=((0.01151329)*sj1);
IkReal x712=(r02*sj0);
IkReal x713=(px*r00);
IkReal x714=((2.0)*r01);
IkReal x715=(pz*r00*sj0);
IkReal x716=(cj4*x687);
IkReal x717=(cj0*pz*r01);
IkReal x718=((0.0057)*x687);
IkReal x719=(cj3*x686);
IkReal x720=(sj4*x686);
IkReal x721=(cj4*x686);
IkReal x722=(sj1*x689);
IkReal x723=(r02*x689);
IkReal x724=((0.1287)*x687);
IkReal x725=((0.04327)*sj4*x687);
evalcond[0]=(((sj1*x691))+((sj1*x695))+((sj3*x716))+x705+(((-1.0)*cj4*x719)));
evalcond[1]=((((-1.0)*x693*x695))+((sj3*x721))+x696+(((-1.0)*x691*x693))+((cj3*x716)));
evalcond[2]=((-0.1073)+(((-1.0)*x686*x710))+((sj1*x698))+((sj0*x692))+((cj1*pz))+(((-1.0)*x724))+(((-0.04327)*cj3*x687))+(((-0.0057)*x686)));
evalcond[3]=((((-1.0)*x693*x698))+(((-0.04327)*x719))+(((-1.0)*py*sj0*x693))+(((-0.1287)*x686))+x718+((pz*sj1))+((x687*x710)));
evalcond[4]=((((0.04327)*sj4*x719))+(((-1.0)*x693*x701))+(((0.1287)*x720))+((r00*x702))+(((-1.0)*x692*x706))+(((-1.0)*x694*x715))+(((-1.0)*sj4*x687*x710))+((x696*x703))+((sj1*x717))+(((-1.0)*sj4*x718)));
evalcond[5]=((((-1.0)*x693*x717))+(((-1.0)*x710*x720))+((x702*x706))+(((-0.1073)*r00*sj0))+(((-1.0)*cj3*x725))+(((-1.0)*x694*x701))+(((-0.0057)*x720))+(((-1.0)*r02*x693*x703))+((r00*x692))+(((-1.0)*sj4*x724))+(((0.1073)*cj0*r01))+((cj1*x715)));
evalcond[6]=((((-1.0)*x692*x703*x704))+((cj3*x687*x709))+(((0.2146)*x713))+(((-1.0)*x693*x723))+((r01*x707))+(((-1.0)*x691*x711))+(((-1.0)*x692*x698*x714))+(((-1.0)*r01*x697*x702))+((x690*x705))+(((-1.0)*x692*x697*x712))+((x691*x722))+(((-1.0)*x695*x711))+((x695*x722))+((sj1*x688*x691))+(((-0.0184034929)*cj4*x719))+(((-1.0)*x696*x697*x698))+((sj1*x690*x695))+(((-1.0)*cj1*x697*x713))+(((-1.0)*r02*x699))+(((-1.0)*x690*x691*x694))+(((-0.011137698)*x721))+(((-1.0)*x688*x694*x695))+((x688*x705))+(((-1.0)*sj3*x686*x709))+((r02*x708))+(((0.000493278)*x716))+(((-1.0)*x700*x716)));
evalcond[7]=((((-1.0)*r01*x692*x697))+((cj1*x690*x691))+((x688*x696))+(((-1.0)*x707*x712))+(((-1.0)*x700*x721))+(((-1.0)*sj1*x697*x713))+((x697*x702*x712))+(((-1.0)*x694*x723))+((x691*x708))+((x690*x696))+(((0.0184034929)*cj3*x716))+(((-1.0)*x688*x691*x693))+(((-1.0)*x690*x693*x695))+((x709*x719))+((x695*x708))+(((-1.0)*x689*x693*x695))+(((-1.0)*x689*x691*x693))+(((-1.0)*x695*x699))+(((-0.2146)*r02*x698))+(((0.000493278)*x721))+((sj3*x687*x709))+((cj1*x688*x695))+(((-1.0)*x691*x699))+((x697*x698*x705))+((x702*x703*x704))+((x698*x702*x714))+(((0.011137698)*x716))+(((0.01151329)*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x726=(cj1*cj3);
IkReal x727=(r01*sj0);
IkReal x728=(cj0*r00);
IkReal x729=(cj1*sj3);
IkReal x730=(cj3*sj1);
IkReal x731=((1.0)*r02);
IkReal x732=((1.0)*sj1*sj3);
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(((((-1.0)*x727*x732))+((x726*x727))+((x726*x728))+(((-1.0)*x730*x731))+(((-1.0)*x728*x732))+(((-1.0)*x729*x731)))),IkReal((((x727*x730))+((x728*x729))+((x728*x730))+((x727*x729))+(((-1.0)*sj1*sj3*x731))+((r02*x726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x734.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x733.value)+(((1.5707963267949)*(x734.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x735=IKcos(j2);
IkReal x736=IKsin(j2);
IkReal x737=px*px;
IkReal x738=pz*pz;
IkReal x739=py*py;
IkReal x740=(r01*sj0);
IkReal x741=(py*sj1);
IkReal x742=((1.0)*cj1);
IkReal x743=((1.0)*sj1);
IkReal x744=(cj0*r00);
IkReal x745=(r02*sj1);
IkReal x746=((2.0)*pz);
IkReal x747=(cj0*px);
IkReal x748=((0.01151329)*cj1);
IkReal x749=((0.0146589071)*sj3);
IkReal x750=(px*r01);
IkReal x751=(cj1*py);
IkReal x752=(px*sj0);
IkReal x753=((2.0)*r00);
IkReal x754=(cj1*r02);
IkReal x755=(cj0*r02);
IkReal x756=((0.2146)*py);
IkReal x757=((0.2146)*pz);
IkReal x758=((0.00146718)*cj4);
IkReal x759=((0.04327)*sj3);
IkReal x760=((0.01151329)*sj1);
IkReal x761=(r02*sj0);
IkReal x762=(px*r00);
IkReal x763=((2.0)*r01);
IkReal x764=(pz*r00*sj0);
IkReal x765=(cj4*x736);
IkReal x766=(cj0*pz*r01);
IkReal x767=((0.0057)*x736);
IkReal x768=(cj3*x735);
IkReal x769=(sj4*x735);
IkReal x770=(cj4*x735);
IkReal x771=(sj1*x738);
IkReal x772=(r02*x738);
IkReal x773=((0.1287)*x736);
IkReal x774=((0.04327)*sj4*x736);
evalcond[0]=(((sj3*x765))+((sj1*x740))+((sj1*x744))+x754+(((-1.0)*cj4*x768)));
evalcond[1]=(((cj3*x765))+(((-1.0)*x742*x744))+((sj3*x770))+(((-1.0)*x740*x742))+x745);
evalcond[2]=((-0.1073)+((cj1*pz))+((sj1*x747))+((sj0*x741))+(((-0.04327)*cj3*x736))+(((-0.0057)*x735))+(((-1.0)*x773))+(((-1.0)*x735*x759)));
evalcond[3]=((((-0.04327)*x768))+(((-0.1287)*x735))+((x736*x759))+(((-1.0)*x742*x747))+x767+((pz*sj1))+(((-1.0)*py*sj0*x742)));
evalcond[4]=(((x745*x752))+(((-1.0)*x742*x750))+(((-1.0)*x743*x764))+(((-1.0)*x741*x755))+((sj1*x766))+((r00*x751))+(((-1.0)*sj4*x736*x759))+(((0.04327)*sj4*x768))+(((0.1287)*x769))+(((-1.0)*sj4*x767)));
evalcond[5]=((((-1.0)*cj3*x774))+((cj1*x764))+(((-1.0)*sj4*x773))+(((-1.0)*r02*x742*x752))+((x751*x755))+(((-0.1073)*r00*sj0))+(((-1.0)*x742*x766))+((r00*x741))+(((-1.0)*x743*x750))+(((-0.0057)*x769))+(((0.1073)*cj0*r01))+(((-1.0)*x759*x769)));
evalcond[6]=((((-0.011137698)*x770))+(((-1.0)*x741*x752*x753))+((r02*x757))+((x739*x754))+((sj1*x737*x740))+(((-1.0)*r01*x746*x751))+(((-1.0)*x740*x760))+(((-1.0)*sj3*x735*x758))+((x744*x771))+(((-1.0)*x742*x772))+(((0.000493278)*x765))+((x737*x754))+((r01*x756))+(((-0.0184034929)*cj4*x768))+((x740*x771))+(((-1.0)*x744*x760))+((cj3*x736*x758))+(((-1.0)*x741*x747*x763))+(((-1.0)*x741*x746*x761))+(((-1.0)*r02*x748))+(((-1.0)*x739*x740*x743))+(((0.2146)*x762))+(((-1.0)*cj1*x746*x762))+(((-1.0)*x737*x743*x744))+(((-1.0)*x745*x746*x747))+((sj1*x739*x744))+(((-1.0)*x749*x765)));
evalcond[7]=((((0.000493278)*x770))+((x747*x751*x763))+(((-1.0)*x756*x761))+(((-1.0)*x738*x742*x744))+(((-1.0)*sj1*x746*x762))+(((0.01151329)*x745))+((cj1*x737*x744))+((x751*x752*x753))+((x739*x745))+((x744*x757))+((x758*x768))+(((0.0184034929)*cj3*x765))+(((-1.0)*x744*x748))+((x746*x751*x761))+((sj3*x736*x758))+(((-0.2146)*r02*x747))+((x737*x745))+(((-1.0)*r01*x741*x746))+((x740*x757))+((cj1*x739*x740))+(((-1.0)*x740*x748))+(((-1.0)*x738*x740*x742))+(((-1.0)*x739*x742*x744))+(((0.011137698)*x765))+(((-1.0)*x743*x772))+(((-1.0)*x737*x740*x742))+((x746*x747*x754))+(((-1.0)*x749*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "99f4dc84ba3882a69abac4d99678b352"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
